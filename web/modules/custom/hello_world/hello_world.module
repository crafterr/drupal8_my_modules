<?php

/**
 * @file
 * Contains hello_world.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function hello_world_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the hello_world module.
    case 'help.page.hello_world':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Hello World module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_token_info().
 */
function hello_world_token_info() {
  $type = [
    'name' => t('Hello World'),
    'description' => t('Tokens related to the Hello World module.'),
  ];

  $tokens['salutation'] = [
    'name' => t('Salutation'),
    'description' => t('The Hello World salutation value.'),
  ];

  return [
    'types' => ['hello_world' => $type],
    'tokens' => ['hello_world' => $tokens],
  ];
}

/**
 * Implements hook_token_info().
 */
/**
 * Implements hook_tokens().
 */
function hello_world_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'hello_world') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'salutation':
          $replacements[$original] = \Drupal::service('hello_world.salutation')->getSalutation();
          $config = Drupal::config('hello_world.custom_salutation');
          $bubbleable_metadata->addCacheableDependency($config);
          break;
        case 'salutation2':
          $replacements[$original] = 'Adam ma kota kot ma adama';
          $config = Drupal::config('hello_world.custom_salutation');
          $bubbleable_metadata->addCacheableDependency($config);
          break;
      }
    }
  }
  return $replacements;
}


/**
 * Implements hook_theme().
 */
function hello_world_theme($existing, $type, $theme, $path) {
  return [
    'hello_world_form' => [
      'render element' => 'form',
    ]
  ];
}

//the same what above only hook_form_FORM_ID_alter
function hello_world_form_salutation_configuration_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  $config = Drupal::config('hello_world.annotate_deletion');
  $form['#submit'][] = 'hello_world_salutation_configuration_form_submit';
  $form['annotate_deletion'] = [
    '#type' => 'radios',
    '#title' => t('Przypisy zostaną usunięte'),
    '#description' => t('Wybierz metodę usuwania przypisów'),
    '#options' => [
      t('Nigdy'),
      t('Losowo'),
      t('Po 30 dniach')
    ],
    '#default_value' => $config->get('annotate_deletion',0), //domyslnie nigdy
  ];

  //any code
}

function hello_world_salutation_configuration_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state)
{
  //$config = \Drupal::config('system.maintenance');
  //$config = $factory->get('system.site');
  //$value = $config->get('page.403');
  $annotate_deletion = $form_state->getValue('annotate_deletion');
  \Drupal::service('config.factory')
    ->getEditable('hello_world.annotate_deletion')
    ->set('annotate_deletion',$annotate_deletion)
    ->save();
}


/**
 * Implements hook_mail().
 */
function hello_world_mail($key, &$message, $params) {
  switch($key) {
    case 'hello_world_log':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('There is an error on your website');
      $message['body'][] = $params['message'];

    break;
  }
}

/**
 * Implements hook_mail_alter().
 */
function hello_world_mail_alter(&$message) {
  switch ($message['key']) {
    case 'hello_world_log':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

      break;
  }
}
